{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n;\nconst ELEMENT_DATA = [{\n  endDeviceId: 123,\n  appId: 456,\n  packetLoss: [1.5, 2, 4],\n  gatewayId: 'gtw1',\n  time: ['11/17/23 10:05', '11/18/23 12:15', '11/19/23 04:15'],\n  batteryStat: [3, 2, 1]\n}, {\n  endDeviceId: 120,\n  appId: 431,\n  packetLoss: [1.7, 1, 3],\n  gatewayId: 'gtw3',\n  time: ['11/16/23 10:05', '11/18/23 01:15', '11/19/23 04:15'],\n  batteryStat: [3, 2, 1]\n}, {\n  endDeviceId: 143,\n  appId: 464,\n  packetLoss: [1, 2, 3],\n  gatewayId: 'gtw2',\n  time: ['11/15/23 10:05', '11/18/23 11:15', '11/19/23 04:15'],\n  batteryStat: [3, 2, 1]\n}];\nexport let DashboardComponent = class DashboardComponent {\n  constructor() {\n    this.breakpointObserver = inject(BreakpointObserver);\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n    this.dataSource = ELEMENT_DATA;\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  standalone: true,\n  imports: [MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, CommonModule]\n})], DashboardComponent);","map":{"version":3,"names":["Component","inject","CommonModule","BreakpointObserver","Breakpoints","map","shareReplay","MatToolbarModule","MatButtonModule","MatSidenavModule","MatIconModule","MatListModule","ELEMENT_DATA","endDeviceId","appId","packetLoss","gatewayId","time","batteryStat","DashboardComponent","constructor","breakpointObserver","isHandset$","observe","Handset","pipe","result","matches","dataSource","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/dashboard/dashboard.component.ts"],"sourcesContent":["import { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\nimport { DeviceTableComponent } from '../device-table/device-table.component';\nimport { DeviceMapComponent } from '../device-map/device-map.component';\n\nexport interface DeviceElement {\n  endDeviceId: number,\n  appId: number,\n  packetLoss: number[],\n  gatewayId: string,\n  time: string[]\n  batteryStat: number[]\n};\n\nconst ELEMENT_DATA: DeviceElement[] = \n[\n  {endDeviceId: 123, appId: 456, packetLoss: [1.5, 2, 4], gatewayId: 'gtw1',  time: ['11/17/23 10:05', '11/18/23 12:15', '11/19/23 04:15'], batteryStat: [3,2,1] },\n  {endDeviceId: 120, appId: 431, packetLoss: [1.7, 1, 3], gatewayId: 'gtw3', time: ['11/16/23 10:05', '11/18/23 01:15', '11/19/23 04:15'], batteryStat: [3,2,1] },\n  {endDeviceId: 143, appId: 464, packetLoss: [1,2,3], gatewayId: 'gtw2', time: ['11/15/23 10:05', '11/18/23 11:15', '11/19/23 04:15'], batteryStat: [3,2,1] }\n];\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    CommonModule,\n  ],\n})\nexport class DashboardComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    );\n\n  dataSource: DeviceElement[] = ELEMENT_DATA;\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,qBAAqB;AAErE,SAASC,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;AACjD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,aAAa,QAAQ,wBAAwB;AAYrD;AAED,MAAMC,YAAY,GAClB,CACE;EAACC,WAAW,EAAE,GAAG;EAAEC,KAAK,EAAE,GAAG;EAAEC,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EAAEC,SAAS,EAAE,MAAM;EAAGC,IAAI,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;EAAEC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;AAAC,CAAE,EAChK;EAACL,WAAW,EAAE,GAAG;EAAEC,KAAK,EAAE,GAAG;EAAEC,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EAAEC,SAAS,EAAE,MAAM;EAAEC,IAAI,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;EAAEC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;AAAC,CAAE,EAC/J;EAACL,WAAW,EAAE,GAAG;EAAEC,KAAK,EAAE,GAAG;EAAEC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAAEC,SAAS,EAAE,MAAM;EAAEC,IAAI,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;EAAEC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;AAAC,CAAE,CAC5J;AAgBM,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAAxBC,YAAA;IACG,KAAAC,kBAAkB,GAAGpB,MAAM,CAACE,kBAAkB,CAAC;IAEvD,KAAAmB,UAAU,GAAwB,IAAI,CAACD,kBAAkB,CACtDE,OAAO,CAACnB,WAAW,CAACoB,OAAO,CAAC,CAC5BC,IAAI,CACHpB,GAAG,CAAEqB,MAAM,IAAKA,MAAM,CAACC,OAAO,CAAC,EAC/BrB,WAAW,EAAE,CACd;IAEH,KAAAsB,UAAU,GAAoBhB,YAAY;EAC5C;CAAC;AAXYO,kBAAkB,GAAAU,UAAA,EAd9B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B,CAAC;EACxCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACP3B,gBAAgB,EAChBC,eAAe,EACfC,gBAAgB,EAChBC,aAAa,EACbC,aAAa,EACbT,YAAY;CAEf,CAAC,C,EACWiB,kBAAkB,CAW9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}