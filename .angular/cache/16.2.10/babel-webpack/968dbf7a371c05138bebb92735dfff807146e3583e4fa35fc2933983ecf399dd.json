{"ast":null,"code":"import { inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ToolBarComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function ToolBarComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(2);\n      return i0.ɵɵresetView(_r0.toggle());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 15);\n    i0.ɵɵtext(2, \"menu\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = [\"*\"];\nexport class ToolBarComponent {\n  constructor() {\n    this.breakpointObserver = inject(BreakpointObserver);\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n  static #_ = this.ɵfac = function ToolBarComponent_Factory(t) {\n    return new (t || ToolBarComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToolBarComponent,\n    selectors: [[\"tool-bar\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 31,\n    vars: 8,\n    consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"false\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [\"mat-list-item\", \"\", \"href\", \"/forgot-password\"], [\"mat-list-item\", \"\", \"href\", \"/login\"], [\"mat-list-item\", \"\", \"href\", \"/signup\"], [\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"href\", \"#\"], [1, \"push-links-right\"], [\"href\", \"/forgot-password\"], [1, \"vertical-seperator\"], [\"href\", \"/login\"], [\"href\", \"/signup\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n    template: function ToolBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0)(1, \"mat-sidenav\", 1, 2);\n        i0.ɵɵpipe(3, \"async\");\n        i0.ɵɵelementStart(4, \"mat-toolbar\");\n        i0.ɵɵtext(5, \"Options\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-nav-list\")(7, \"a\", 3);\n        i0.ɵɵtext(8, \"Forgot Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"a\", 4);\n        i0.ɵɵtext(10, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"a\", 5);\n        i0.ɵɵtext(12, \"Signup\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"mat-sidenav-content\")(14, \"mat-toolbar\", 6);\n        i0.ɵɵtemplate(15, ToolBarComponent_button_15_Template, 3, 0, \"button\", 7);\n        i0.ɵɵpipe(16, \"async\");\n        i0.ɵɵelementStart(17, \"a\", 8);\n        i0.ɵɵtext(18, \"CSSI Home\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"span\", 9);\n        i0.ɵɵelementStart(20, \"a\", 10);\n        i0.ɵɵtext(21, \"Forgot Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"p\", 11);\n        i0.ɵɵtext(23, \"|\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"a\", 12);\n        i0.ɵɵtext(25, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"p\", 11);\n        i0.ɵɵtext(27, \"|\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"a\", 13);\n        i0.ɵɵtext(29, \"Signup\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵprojection(30);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"mode\", \"over\")(\"opened\", false);\n        i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 4, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(16, 6, ctx.isHandset$));\n      }\n    },\n    dependencies: [i1.NgIf, i1.AsyncPipe],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["inject","BreakpointObserver","Breakpoints","map","shareReplay","i0","ɵɵelementStart","ɵɵlistener","ToolBarComponent_button_15_Template_button_click_0_listener","ɵɵrestoreView","_r3","ɵɵnextContext","_r0","ɵɵreference","ɵɵresetView","toggle","ɵɵtext","ɵɵelementEnd","ToolBarComponent","constructor","breakpointObserver","isHandset$","observe","Handset","pipe","result","matches","_","_2","selectors","standalone","features","ɵɵStandaloneFeature","ngContentSelectors","_c0","decls","vars","consts","template","ToolBarComponent_Template","rf","ctx","ɵɵtemplate","ToolBarComponent_button_15_Template","ɵɵelement","ɵɵprojection","ɵɵadvance","ɵɵproperty","ɵɵattribute","ɵɵpipeBind1"],"sources":["/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/tool-bar/tool-bar.component.ts","/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/tool-bar/tool-bar.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\n//Common module is imported for pipes such as async.\nimport { CommonModule } from '@angular/common';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n@Component({\n  //Altered selector for easier selection in html\n  selector: 'tool-bar',\n  templateUrl: './tool-bar.component.html',\n  styleUrls: ['./tool-bar.component.css'],\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    CommonModule,\n  ],\n})\nexport class ToolBarComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    );\n}\n","<!--This is the side nave container, and it wraps everything because otherwaise the side bar wouldn't be able to pop out over page-->\n<mat-sidenav-container class=\"sidenav-container\">\n    <!-- Can add ngclass that defines a hidden which only shows the hamburger side nav if the user is on handheld mode, mode makes the side bar either push or appear over main page -->\n    <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    fixedInViewport=\"false\"\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"'over'\"\n    [opened]=\"false\"\n    >\n    <mat-toolbar>Options</mat-toolbar>\n    <mat-nav-list>\n        <a mat-list-item href=\"/forgot-password\">Forgot Password</a>\n        <a mat-list-item href=\"/login\">Login</a>\n        <a mat-list-item href=\"/signup\">Signup</a>\n    </mat-nav-list>\n    </mat-sidenav>\n    <mat-sidenav-content>\n    <!--Remove the ngIf to keep the icon for the sidenave consistent through all sizes if wanted.-->\n    <mat-toolbar color=\"primary\">\n        <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"\n        >\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n        </button>\n        <a href=\"#\">CSSI Home</a>\n        <span class=\"push-links-right\"></span>\n        <a href=\"/forgot-password\">Forgot Password</a>\n        <p class=\"vertical-seperator\">|</p>\n        <a href=\"/login\">Login</a>\n        <p class=\"vertical-seperator\">|</p>\n        <a href=\"/signup\">Signup</a>\n    </mat-toolbar>\n    <!-- Add Content Here, ng-content is used for angular content projection so we can add stuff in tool-bar wrapper in app html -->\n    <ng-content></ng-content>\n    </mat-sidenav-content>\n</mat-sidenav-container>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}