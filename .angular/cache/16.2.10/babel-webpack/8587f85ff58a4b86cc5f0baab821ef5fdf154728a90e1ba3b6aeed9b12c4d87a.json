{"ast":null,"code":"import { inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class ToolBarComponent {\n  constructor() {\n    this.breakpointObserver = inject(BreakpointObserver);\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n  static #_ = this.ɵfac = function ToolBarComponent_Factory(t) {\n    return new (t || ToolBarComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToolBarComponent,\n    selectors: [[\"tool-bar\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 2,\n    vars: 0,\n    template: function ToolBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"tool-bar works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["inject","BreakpointObserver","Breakpoints","map","shareReplay","ToolBarComponent","constructor","breakpointObserver","isHandset$","observe","Handset","pipe","result","matches","_","_2","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","template","ToolBarComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/tool-bar/tool-bar.component.ts","/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/tool-bar/tool-bar.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\n//Common module is imported for pipes such as async.\nimport { CommonModule } from '@angular/common';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n@Component({\n  //Altered selector for easier selection in html\n  selector: 'tool-bar',\n  templateUrl: './tool-bar.component.html',\n  styleUrls: ['./tool-bar.component.css'],\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    CommonModule,\n  ],\n})\nexport class ToolBarComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    );\n}\n","<p>tool-bar works!</p>\n"],"mappings":"AAAA,SAAoBA,MAAM,QAAQ,eAAe;AAGjD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,qBAAqB;AAErE,SAASC,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;;AAsBjD,OAAM,MAAOC,gBAAgB;EAf7BC,YAAA;IAgBU,KAAAC,kBAAkB,GAAGP,MAAM,CAACC,kBAAkB,CAAC;IAEvD,KAAAO,UAAU,GAAwB,IAAI,CAACD,kBAAkB,CACtDE,OAAO,CAACP,WAAW,CAACQ,OAAO,CAAC,CAC5BC,IAAI,CACHR,GAAG,CAAES,MAAM,IAAKA,MAAM,CAACC,OAAO,CAAC,EAC/BT,WAAW,EAAE,CACd;;EACJ,QAAAU,CAAA,G;qBATYT,gBAAgB;EAAA;EAAA,QAAAU,EAAA,G;UAAhBV,gBAAgB;IAAAW,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAC,EAAA,CAAAC,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC3B7BN,EAAA,CAAAQ,cAAA,QAAG;QAAAR,EAAA,CAAAS,MAAA,sBAAe;QAAAT,EAAA,CAAAU,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}