{"ast":null,"code":"import { FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgIf } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCardModule } from '@angular/material/card';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/forms\";\nfunction ForgottenPasswordComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.getErrorMessage());\n  }\n}\nexport class ForgottenPasswordComponent {\n  constructor() {\n    this.emailField = new FormControl('', [Validators.required, Validators.email]);\n    this.email = '';\n  }\n  //use the `` to allow connections to the variable in the declaration.\n  submitForm() {\n    var message = `Welcome ${this.email}`;\n    if (this.emailField.hasError('required') || this.emailField.hasError('email')) {\n      message = 'Email incorrect!';\n      alert(message);\n    } else {\n      alert(message);\n    }\n  }\n  // This method gets an error message based on what error that the user has produced, empty, or invalid email.\n  getErrorMessage() {\n    if (this.emailField.hasError('required')) {\n      return 'You must enter a value';\n    }\n    return this.emailField.hasError('email') ? 'Not a valid email' : '';\n  }\n  static #_ = this.ɵfac = function ForgottenPasswordComponent_Factory(t) {\n    return new (t || ForgottenPasswordComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ForgottenPasswordComponent,\n    selectors: [[\"app-forgot-password\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 16,\n    vars: 4,\n    consts: [[1, \"main-body\"], [1, \"forgotten-password-form\"], [1, \"title\"], [1, \"container\", 3, \"ngSubmit\"], [\"loginForm\", \"ngForm\"], [\"color\", \"primary\"], [\"matInput\", \"\", \"name\", \"email\", \"placeholder\", \"good@example.com\", \"required\", \"\", 3, \"ngModel\", \"formControl\", \"ngModelChange\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"disabled\"]],\n    template: function ForgottenPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"body\", 0)(2, \"mat-card\", 1)(3, \"h1\", 2);\n        i0.ɵɵtext(4, \"Forgotten Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\");\n        i0.ɵɵtext(6, \" Please enter your email, an email will be sent to reset your password. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"form\", 3, 4);\n        i0.ɵɵlistener(\"ngSubmit\", function ForgottenPasswordComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(9, \"mat-form-field\", 5)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function ForgottenPasswordComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.email = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, ForgottenPasswordComponent_mat_error_13_Template, 2, 1, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵtext(15, \" Send Email \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(8);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngModel\", ctx.email)(\"formControl\", ctx.emailField);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailField.invalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", _r0.invalid);\n      }\n    },\n    dependencies: [MatFormFieldModule, i1.MatFormField, i1.MatLabel, i1.MatError, MatInputModule, i2.MatInput, MatSelectModule, MatCardModule, i3.MatCard, MatIconModule, MatButtonModule, i4.MatButton, FormsModule, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgForm, ReactiveFormsModule, i5.FormControlDirective, NgIf],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: flex-start;\\n}\\n\\n.title[_ngcontent-%COMP%] {\\n    text-align: center;\\n    border-bottom: 2px solid;\\n    transform: translate(0%, -60%);\\n}\\n\\n.forgot-password-form[_ngcontent-%COMP%] {\\n    \\n\\n    border: 5px solid;\\n    position: absolute;\\n    top: 50%;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    padding: 100px;\\n    background-color: beige;\\n}\\n\\n.main-body[_ngcontent-%COMP%] {\\n    background-color: aliceblue;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZm9yZ290dGVuLXBhc3N3b3JkL2ZvcmdvdHRlbi1wYXNzd29yZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsd0JBQXdCO0lBQ3hCLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLCtGQUErRjtJQUMvRixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLFFBQVE7SUFDUixTQUFTO0lBQ1QsZ0NBQWdDO0lBQ2hDLGNBQWM7SUFDZCx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSwyQkFBMkI7QUFDL0IiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbn1cclxuXHJcbi50aXRsZSB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQ7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwJSwgLTYwJSk7XHJcbn1cclxuXHJcbi5mb3Jnb3QtcGFzc3dvcmQtZm9ybSB7XHJcbiAgICAvKiBUaGlzIGFsaWducyB0aGUgZGl2IGZvcm0sIGhvcml6b250YWxseSBhbmQgdmVydGljYWxseSBzbyBpdCBiZWNvbWVzIHRoZSBjZW50ZXIgb2YgdGhlIHBhZ2UgKi9cclxuICAgIGJvcmRlcjogNXB4IHNvbGlkO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiA1MCU7XHJcbiAgICBsZWZ0OiA1MCU7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgIHBhZGRpbmc6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XHJcbn1cclxuXHJcbi5tYWluLWJvZHkge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYWxpY2VibHVlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["FormControl","Validators","FormsModule","ReactiveFormsModule","NgIf","MatInputModule","MatFormFieldModule","MatIconModule","MatButtonModule","MatSelectModule","MatCardModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","getErrorMessage","ForgottenPasswordComponent","constructor","emailField","required","email","submitForm","message","hasError","alert","_","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ForgottenPasswordComponent_Template","rf","ctx","ɵɵlistener","ForgottenPasswordComponent_Template_form_ngSubmit_7_listener","ForgottenPasswordComponent_Template_input_ngModelChange_12_listener","$event","ɵɵtemplate","ForgottenPasswordComponent_mat_error_13_Template","ɵɵproperty","invalid","_r0","i1","MatFormField","MatLabel","MatError","i2","MatInput","i3","MatCard","i4","MatButton","i5","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","NgForm","FormControlDirective","styles"],"sources":["/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/forgotten-password/forgotten-password.component.ts","/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/forgotten-password/forgotten-password.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n  FormControl,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { NgIf } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCardModule } from '@angular/material/card';\nimport { ToolBarComponent } from '../tool-bar/tool-bar.component';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgotten-password.component.html',\n  styleUrls: ['./forgotten-password.component.css'],\n  standalone: true,\n  imports: [\n    ToolBarComponent,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCardModule,\n    MatIconModule,\n    MatButtonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgIf,\n  ],\n})\nexport class ForgottenPasswordComponent {\n  emailField = new FormControl('', [Validators.required, Validators.email]);\n  email: string = '';\n\n  //use the `` to allow connections to the variable in the declaration.\n  submitForm() {\n    var message: string = `Welcome ${this.email}`;\n    if (\n      this.emailField.hasError('required') ||\n      this.emailField.hasError('email')\n    ) {\n      message = 'Email incorrect!';\n      alert(message);\n    } else {\n      alert(message);\n    }\n  }\n\n  // This method gets an error message based on what error that the user has produced, empty, or invalid email.\n  getErrorMessage() {\n    if (this.emailField.hasError('required')) {\n      return 'You must enter a value';\n    }\n\n    return this.emailField.hasError('email') ? 'Not a valid email' : '';\n  }\n}\n","<div>\n    <body class=\"main-body\">\n    <mat-card class=\"forgotten-password-form\">\n        <h1 class=\"title\">Forgotten Password</h1>\n        <p>\n        Please enter your email, an email will be sent to reset your password.\n        </p>\n        <!--Form starts here and is event bound to a method that will let us connect all these entries-->\n        <form class=\"container\" (ngSubmit)=\"submitForm()\" #loginForm=\"ngForm\">\n        <!--\"Banana in the box\" [()], property binding, then event binding. Connects template to class and likewise-->\n        <!--Using {{variable}} would show how the variable is now connected to the field-->\n        <mat-form-field color=\"primary\">\n            <mat-label>Email</mat-label>\n            <input\n            matInput\n            name=\"email\"\n            placeholder=\"good@example.com\"\n            [(ngModel)]=\"email\"\n            [formControl]=\"emailField\"\n            required\n            />\n            <mat-error *ngIf=\"emailField.invalid\">{{\n            getErrorMessage()\n            }}</mat-error>\n        </mat-form-field>\n        <!--Button will only be valid if all the required forms are filled out-->\n        <button mat-raised-button color=\"accent\" [disabled]=\"loginForm.invalid\">\n            Send Email\n        </button>\n        </form>\n    </mat-card>\n    </body>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}