{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgIf } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCardModule } from '@angular/material/card';\nimport { ToolBarComponent } from '../tool-bar/tool-bar.component';\nexport let ForgottenPasswordComponent = class ForgottenPasswordComponent {\n  constructor() {\n    this.emailField = new FormControl('', [Validators.required, Validators.email]);\n    this.email = '';\n  }\n  //use the `` to allow connections to the variable in the declaration.\n  submitForm() {\n    var message = `Welcome ${this.email}`;\n    if (this.emailField.hasError('required') || this.emailField.hasError('email')) {\n      message = 'Email incorrect!';\n      alert(message);\n    } else {\n      alert(message);\n    }\n  }\n  // This method gets an error message based on what error that the user has produced, empty, or invalid email.\n  getErrorMessage() {\n    if (this.emailField.hasError('required')) {\n      return 'You must enter a value';\n    }\n    return this.emailField.hasError('email') ? 'Not a valid email' : '';\n  }\n};\nForgottenPasswordComponent = __decorate([Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgotten-password.component.html',\n  styleUrls: ['./forgotten-password.component.css'],\n  standalone: true,\n  imports: [ToolBarComponent, MatFormFieldModule, MatInputModule, MatSelectModule, MatCardModule, MatIconModule, MatButtonModule, FormsModule, ReactiveFormsModule, NgIf]\n})], ForgottenPasswordComponent);","map":{"version":3,"names":["Component","FormControl","Validators","FormsModule","ReactiveFormsModule","NgIf","MatInputModule","MatFormFieldModule","MatIconModule","MatButtonModule","MatSelectModule","MatCardModule","ToolBarComponent","ForgottenPasswordComponent","constructor","emailField","required","email","submitForm","message","hasError","alert","getErrorMessage","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["/home/cmcalvain/UNR/senior_year/senior_project/cssi_web_portal/src/app/forgotten-password/forgotten-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n  FormControl,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { NgIf } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCardModule } from '@angular/material/card';\nimport { ToolBarComponent } from '../tool-bar/tool-bar.component';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgotten-password.component.html',\n  styleUrls: ['./forgotten-password.component.css'],\n  standalone: true,\n  imports: [\n    ToolBarComponent,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCardModule,\n    MatIconModule,\n    MatButtonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgIf,\n  ],\n})\nexport class ForgottenPasswordComponent {\n  emailField = new FormControl('', [Validators.required, Validators.email]);\n  email: string = '';\n\n  //use the `` to allow connections to the variable in the declaration.\n  submitForm() {\n    var message: string = `Welcome ${this.email}`;\n    if (\n      this.emailField.hasError('required') ||\n      this.emailField.hasError('email')\n    ) {\n      message = 'Email incorrect!';\n      alert(message);\n    } else {\n      alert(message);\n    }\n  }\n\n  // This method gets an error message based on what error that the user has produced, empty, or invalid email.\n  getErrorMessage() {\n    if (this.emailField.hasError('required')) {\n      return 'You must enter a value';\n    }\n\n    return this.emailField.hasError('email') ? 'Not a valid email' : '';\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SACEC,WAAW,EACXC,UAAU,EACVC,WAAW,EACXC,mBAAmB,QACd,gBAAgB;AACvB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,gBAAgB,QAAQ,gCAAgC;AAoB1D,WAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAAhCC,YAAA;IACL,KAAAC,UAAU,GAAG,IAAId,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACe,KAAK,CAAC,CAAC;IACzE,KAAAA,KAAK,GAAW,EAAE;EAwBpB;EAtBE;EACAC,UAAUA,CAAA;IACR,IAAIC,OAAO,GAAW,WAAW,IAAI,CAACF,KAAK,EAAE;IAC7C,IACE,IAAI,CAACF,UAAU,CAACK,QAAQ,CAAC,UAAU,CAAC,IACpC,IAAI,CAACL,UAAU,CAACK,QAAQ,CAAC,OAAO,CAAC,EACjC;MACAD,OAAO,GAAG,kBAAkB;MAC5BE,KAAK,CAACF,OAAO,CAAC;KACf,MAAM;MACLE,KAAK,CAACF,OAAO,CAAC;;EAElB;EAEA;EACAG,eAAeA,CAAA;IACb,IAAI,IAAI,CAACP,UAAU,CAACK,QAAQ,CAAC,UAAU,CAAC,EAAE;MACxC,OAAO,wBAAwB;;IAGjC,OAAO,IAAI,CAACL,UAAU,CAACK,QAAQ,CAAC,OAAO,CAAC,GAAG,mBAAmB,GAAG,EAAE;EACrE;CACD;AA1BYP,0BAA0B,GAAAU,UAAA,EAlBtCvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC,CAAC;EACjDC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACPhB,gBAAgB,EAChBL,kBAAkB,EAClBD,cAAc,EACdI,eAAe,EACfC,aAAa,EACbH,aAAa,EACbC,eAAe,EACfN,WAAW,EACXC,mBAAmB,EACnBC,IAAI;CAEP,CAAC,C,EACWQ,0BAA0B,CA0BtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}